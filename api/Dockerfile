# это ОБРАЗ, image.
# это ДЕКЛАРАЦИЯ КОМАНД, которые приведут к созданию КОНТЕЙНЕРА -экземпляра линукса с определенными примочками.
# с него мы клонируем контейнер.
# Т.е. получим образ linux & node_12 в нем.


FROM node:13.12.0-alpine
# После того, как мы поднимем common-образ, охватив все прописанные в Docker-compose.yml СЕРВИСЫ, -
# мы с помощью команды docker images увидим ДВА поднятых образа по КАЖДОМУ СЕРВИСУ:
# - "названиеПроекта_имяServices",
# - node , FROM_чего данный сервис создается.


# дополнительная папка в образе, в которой мы будем работать.
# Можно написать ЛЮБОЙ путь, /foo, /app, без разницы абсолютно.
WORKDIR /usr/src/app

# Копируем в ./-образа служебные файлы для инстиллируемого в докер сервиса.
# Копируем package.json и package-lock.json
# package*.json - это откуда и что копируем,
# ./            - это WORKDIR, root, куда копируем.
# Т.к. копируем более, чем 1 КОНКРЕТНЫЙ элемент, то мы должны копировать в ПАПКУ, и поэтому в конце ставить "/" обязательно.
COPY package*.json ./

# Устанавливаем в WORKDIR образа npm-пакеты, необходимые для сервиса.
# Запуск npm install ВНУТРИ образа.
RUN npm install
RUN npm audit fix

# Все остальные файлы из папки, в которой лежит Dockerfile, копируем внутрь WORKDIR образа,
# все, КРОМЕ файлов, прописанных в .dockerignore,
# в частности - кроме папки node_module.
# node_module мы генерируем в образе самостоятельно.
# Здесь копируем всю ДИРЕКТОРИЮ целиком в такую же директорию, поэтому "/" можно не ставить.
COPY . .


# EXPOSE & CMD можно прописать здесь, но лучше - на уровне Docker-compose, в docker-compose.yml

# Какой свой порт DOCKER по данному Dockerfil'у выставит наружу,
# а в броузере, БЕЗ DOCKER-COMPOSE, мы сможем открывать содержимое донного образа через порт localhost:3000.
# Это тот самый порт, указанный нами в express <=exactly.
#EXPOSE 3000

# какую команду запускаем при старте контейнера
#CMD ["node", "run src/index.js"]
#CMD ["node", "run start"]